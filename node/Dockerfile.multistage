# ===========================================
# 答题系统多阶段构建 Dockerfile（可选）
# 进一步优化镜像大小和构建速度
# ===========================================

# ============= 构建阶段 =============
FROM node:18-alpine AS builder

# 设置构建环境变量
ENV NODE_ENV=production

# 设置工作目录
WORKDIR /build

# 复制 package 文件
COPY package*.json ./

# 安装所有依赖（包括开发依赖用于构建）
RUN npm ci --include=dev && \
    npm cache clean --force

# 复制源代码
COPY . .

# 可选：运行构建脚本（如果有的话）
# RUN npm run build

# 清理开发依赖，只保留生产依赖
RUN npm prune --production

# ============= 生产阶段 =============
FROM node:18-alpine AS production

# 设置镜像元数据
LABEL maintainer="答题系统开发团队"
LABEL description="答题系统后端API服务（多阶段构建版本）"
LABEL version="1.0.0"
LABEL stage="production"

# 安装额外的系统依赖（如果需要）
# RUN apk add --no-cache tini

# 创建应用用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 设置工作目录
WORKDIR /app

# 从构建阶段复制生产环境文件
# 只复制必要的文件，进一步减小镜像体积
COPY --from=builder --chown=nodejs:nodejs /build/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /build/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /build/bin ./bin
COPY --from=builder --chown=nodejs:nodejs /build/config ./config
COPY --from=builder --chown=nodejs:nodejs /build/controllers ./controllers
COPY --from=builder --chown=nodejs:nodejs /build/db ./db
COPY --from=builder --chown=nodejs:nodejs /build/helpers ./helpers
COPY --from=builder --chown=nodejs:nodejs /build/llm ./llm
COPY --from=builder --chown=nodejs:nodejs /build/MiddleWares ./MiddleWares
COPY --from=builder --chown=nodejs:nodejs /build/models ./models
COPY --from=builder --chown=nodejs:nodejs /build/routes ./routes
COPY --from=builder --chown=nodejs:nodejs /build/services ./services
COPY --from=builder --chown=nodejs:nodejs /build/app.js ./
# 不复制敏感文件和开发文件

# 创建必要目录
RUN mkdir -p /app/logs /app/public && \
    chown -R nodejs:nodejs /app && \
    chmod -R 755 /app

# 切换到非特权用户
USER nodejs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "const http = require('http'); \
    const options = { \
      host: 'localhost', \
      port: process.env.PORT || 3000, \
      path: '/health', \
      timeout: 8000 \
    }; \
    const req = http.request(options, (res) => { \
      process.exit(res.statusCode === 200 ? 0 : 1); \
    }); \
    req.on('error', () => process.exit(1)); \
    req.on('timeout', () => process.exit(1)); \
    req.end();"

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 使用 tini 作为 init 进程（可选，用于处理信号）
# ENTRYPOINT ["tini", "--"]

# 启动应用
CMD ["node", "bin/www"]